{"ast":null,"code":"const rollDice = command => {\n  const regex = /\\/r\\s+(\\d*)d(\\d+)([ad]?)$/;\n  const match = command.match(regex);\n  if (!match) {\n    return 'Commande invalide';\n  }\n  const [_, numDiceStr, diceTypeStr, modifier] = match;\n  let numDice = parseInt(numDiceStr) || 1;\n  const diceType = parseInt(diceTypeStr);\n  if (modifier === 'a' || modifier === 'd') {\n    numDice = 2; // Toujours lancer 2 dés pour avantage ou désavantage\n  }\n  let rolls = [];\n  for (let i = 0; i < numDice; i++) {\n    rolls.push(Math.floor(Math.random() * diceType) + 1);\n  }\n  let result;\n  if (modifier === 'a') {\n    result = Math.max(...rolls);\n  } else if (modifier === 'd') {\n    result = Math.min(...rolls);\n  } else {\n    result = rolls.reduce((sum, roll) => sum + roll, 0);\n  }\n  return {\n    result,\n    rolls\n  };\n};\nexport default rollDice;","map":{"version":3,"names":["rollDice","command","regex","match","_","numDiceStr","diceTypeStr","modifier","numDice","parseInt","diceType","rolls","i","push","Math","floor","random","result","max","min","reduce","sum","roll"],"sources":["C:/Users/Sphins_portabel/Dropbox/htdocs/Projet/grimoire_guardians_full/grimoires-guardians-frontend/src/utils/diceRoller.js"],"sourcesContent":["const rollDice = (command) => {\r\n    const regex = /\\/r\\s+(\\d*)d(\\d+)([ad]?)$/;\r\n    const match = command.match(regex);\r\n\r\n    if (!match) {\r\n        return 'Commande invalide';\r\n    }\r\n\r\n    const [_, numDiceStr, diceTypeStr, modifier] = match;\r\n    let numDice = parseInt(numDiceStr) || 1;\r\n    const diceType = parseInt(diceTypeStr);\r\n\r\n    if (modifier === 'a' || modifier === 'd') {\r\n        numDice = 2; // Toujours lancer 2 dés pour avantage ou désavantage\r\n    }\r\n\r\n    let rolls = [];\r\n    for (let i = 0; i < numDice; i++) {\r\n        rolls.push(Math.floor(Math.random() * diceType) + 1);\r\n    }\r\n\r\n    let result;\r\n    if (modifier === 'a') {\r\n        result = Math.max(...rolls);\r\n    } else if (modifier === 'd') {\r\n        result = Math.min(...rolls);\r\n    } else {\r\n        result = rolls.reduce((sum, roll) => sum + roll, 0);\r\n    }\r\n\r\n    return {\r\n        result,\r\n        rolls,\r\n    };\r\n};\r\n\r\nexport default rollDice;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,OAAO,IAAK;EAC1B,MAAMC,KAAK,GAAG,2BAA2B;EACzC,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAACD,KAAK,CAAC;EAElC,IAAI,CAACC,KAAK,EAAE;IACR,OAAO,mBAAmB;EAC9B;EAEA,MAAM,CAACC,CAAC,EAAEC,UAAU,EAAEC,WAAW,EAAEC,QAAQ,CAAC,GAAGJ,KAAK;EACpD,IAAIK,OAAO,GAAGC,QAAQ,CAACJ,UAAU,CAAC,IAAI,CAAC;EACvC,MAAMK,QAAQ,GAAGD,QAAQ,CAACH,WAAW,CAAC;EAEtC,IAAIC,QAAQ,KAAK,GAAG,IAAIA,QAAQ,KAAK,GAAG,EAAE;IACtCC,OAAO,GAAG,CAAC,CAAC,CAAC;EACjB;EAEA,IAAIG,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;IAC9BD,KAAK,CAACE,IAAI,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,QAAQ,CAAC,GAAG,CAAC,CAAC;EACxD;EAEA,IAAIO,MAAM;EACV,IAAIV,QAAQ,KAAK,GAAG,EAAE;IAClBU,MAAM,GAAGH,IAAI,CAACI,GAAG,CAAC,GAAGP,KAAK,CAAC;EAC/B,CAAC,MAAM,IAAIJ,QAAQ,KAAK,GAAG,EAAE;IACzBU,MAAM,GAAGH,IAAI,CAACK,GAAG,CAAC,GAAGR,KAAK,CAAC;EAC/B,CAAC,MAAM;IACHM,MAAM,GAAGN,KAAK,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,EAAE,CAAC,CAAC;EACvD;EAEA,OAAO;IACHL,MAAM;IACNN;EACJ,CAAC;AACL,CAAC;AAED,eAAeX,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}